/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React from "react";
import { useGLTF } from "@react-three/drei/native";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    [nodeName: string]: THREE.Mesh;
  };
  materials: {
    ["Material.002"]: THREE.MeshStandardMaterial;
  };
  nodes_letter: {
    A: THREE.Mesh;
    B: THREE.Mesh;
    C: THREE.Mesh;
    D: THREE.Mesh;
    E: THREE.Mesh;
    F: THREE.Mesh;

  };
  materials_letter: {
    ["Material.002"]: THREE.MeshStandardMaterial;
  };
};

const material_metal = new THREE.MeshStandardMaterial({
  color: 0x2194ce,
  metalness: 0.5,
  roughness: 0.8,
});

const material_transparent = new THREE.MeshStandardMaterial({
  color: 'orange',
  transparent: true,
  opacity: 0.7,
});



export default function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF(require('../assets/model.glb')) as GLTFResult;
  const { nodes: nodes_letter, materials: materials_letter } = useGLTF(require('../assets/alphabet.gltf')) as GLTFResult;

  return (
    <>
      <group {...props} dispose={null} scale={1}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube.geometry}
          material={material_metal}
          position={[0, 0.5, 0]}
          rotation={[0, 0.5, 0]}
        />
      </group>
      <group {...props} dispose={null} scale={35} position={[0, 0.5, 0]} rotation={[0, 0.5, 0]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes_letter.Z.geometry}
          material={material_transparent}
          position={[0, -0.035, 0.028]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes_letter.A.geometry}
          material={material_transparent}
          position={[0, -0.035, -0.033]}
        />
        {/* <mesh
          castShadow
          receiveShadow
          geometry={nodes_letter.G.geometry}
          material={material_transparent}
          position={[0.03, -0.035, 0]}
          rotation={[1, 1, 0]}
        /> */}
      </group>
    </>
  );
}

useGLTF.preload(require('../assets/model.glb'));
useGLTF.preload(require('../assets/alphabet.gltf'));
